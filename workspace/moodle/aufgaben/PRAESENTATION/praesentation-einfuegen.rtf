{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red9\green29\blue57;}
\paperw11900\paperh16840\margl1440\margr1440\vieww19620\viewh12800\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0 3.1 Aufgaben\
\
ALLE AUFGABEN: \
\
Kapitel 1: Einf\'fchrungsquiz\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 1. Baue ein NOT, verbinde dessen Eingang mit dem Schalter, den Ausgang mit der Lampe und vergleiche in der Simulation die Funktionsweise dieses Bausteins.\
\
2. Baue ein AND und ein OR, verbinde die Ausg\'e4nge jeweils mit einer Lampe und vergleiche in der Simulation die Funktionsweise der beiden Bausteine.\
\
3.Informiere dich \'fcber die Funktionsweise eines NAND-Gatters und baue selbst\'e4ndig ein NAND.\
\
4.Informiere dich \'fcber die Funktionsweise eines NOR-Gatters und baue selbst\'e4ndig ein NOR\
\
5.Informiere dich \'fcber die Funktionsweise eines XOR-Gatters und baue selbst\'e4ndig ein XOR.\
\
6.Baue eine Schaltung, dessen Lampe nur leuchtet, wenn entweder beide Schalter an oder aus sind. (Wie hei\'dft dieser Baustein?)\
Hilfe: Betrachte das XOR.\
\
7.Finde den Fehler bei dem Schaltnetz mit diesem booleschem Ausdruck: (a und b und c) und korrigiere diesen.\
\
8.Finde den Fehler bei dem Schaltnetz mit diesem booleschem als Schaltnetz: (a und b) v (c und d)\
\
9.Baue diesen booleschen Ausdruck als Schaltnetz:\
\
\
\
\
\
Kapitel 2: FlipFlop Quiz\
1. Baue eine Clock mit einer Periodendauer von 6.\
Hinweis: Du brauchst nur einen Baustein und \'fcber "Rechtsklick -> Eigenschaften" l\'e4sst sich die Verz\'f6gerung eines Bausteins einstellen.\
\
2. Hier handelt es sich um RS-FlipFlop ohne die entsprechenden Kabel.\
Verbinde die Bausteine\
\
3. Baue ein D Latch und verwende dazu das RS Flip Flop\
\
4. Baue ein D flip Flop. verwende dazu, was du brauchst.\
\
5. In einem Zimmer sind 3 Lichtschalter und eine Lampe. Bei jeder Bet\'e4tigung einen beliebigen Schalters muss sich der Zustand der Lampe \'e4ndern. Simuliere dieses Szenario.\
P.S. Ein Blinken am Anfang (unstabiler Zustand) l\'e4sst sich oftmals nicht vermeiden. Dies kann ignoriert werden. Au\'dferdem ist es f\'fcr den Server schwer, die Einreichungen mit der Musterl\'f6sung zu vergleichen, da es viele verschiedene L\'f6sungen geben kann.\
\
6. Baue ein 4-Bit-Register und verwende dazu, was du brauchst!\
\
\
\
\
Kapitel 3: Addiererquiz\
1. 
\f1\fs26 Hier siehst du einen Halbaddierer ohne die entsprechenden Kabel. Vervollst\'e4ndige den Halbaddierer.
\f0\fs24 \
\
2. Baue einen Volladdierer. Verwende dazu die Komponente Halbaddierer.\
\
3. Hier siehst du einen Volladdierer, bestehend aus ANDs, ORs und NOTs.\
Leider haben sich ein paar Fehler eingeschlichen, finde und korrigiere diese.\
\
4. Baue einen 4Bit Carry Ripple Addierer. Verwende dazu die Komponente Volladdierer.\
\
5. Baue eine Schaltung, die bin\'e4r hochz\'e4hlt. Verwende dazu den 4Bit-Carry-Ripple Addierer.\
Hinweis: Die Verz\'f6gerung einer Komponente kann in den Eigenschaften (Rechtsklick) ge\'e4ndert werden.\
\
6. Informiere dich \'fcber die Funktionsweise eines 1Bit-Multiplexers und baue diesen.\
\
7. Verlege die Leitungen f\'fcr einen 4Bit-Multiplexer\
\
8. Entwerfe einen 16-Bit-Carry-Select-Addierer und verwende dazu den 1-Bit-MUX, den 4-Bit-MUX und den 4-Bit-Carry-Ripple-Addierer\
\
\
\
\
AUFGABENTYPEN:\
Beispiele:\
-> Informiere dich \'fcber die Funktionsweise eines XOR-Gatters und baue selbst\'e4ndig ein XOR.\
-> Finde den Fehler bei dem Schaltnetz und korrigiere diesen.\
-> Hier handelt es sich um RS-FlipFlop ohne die entsprechenden Kabel. Verbinde die Bausteine\
-> Entwerfe einen 16-Bit-Carry-Select-Addierer und verwende dazu den 1-Bit-MUX, den 4-Bit-MUX und den 4-Bit-Carry-Ripple-Addierer\
\
\
\
\
AUFBAU DER AUFGABEN:\
Die Kapitel und Aufgaben bauen aufeinander auf und ben\'f6tigen das Verst\'e4ndnis vorhergegangener Aufgaben.\
Komponenten, die in vorhergehenden Aufgaben erstellt wurden, k\'f6nnen in darauffolgenden Kapitel verwendet werden.\
\
Beispiel: Kapitel3\
\
1. Halbaddierer\
2. Volladdierer (Ben\'f6tigt: Halbaddierer)\
3. Volladdierer (Ben\'f6tigt: Halbaddierer)\
4. Carry Ripple Addierer (Ben\'f6tigt: Volladdierer)\
5. bin\'e4r hochz\'e4hlen (Ben\'f6tigt: Carry Ripple Addierer)\
6. 1-Bit-MUX\
7. 4-Bit-MUX (Ben\'f6tigt: 1-Bit-MUX)\
8. 16-Bit-Carry-Select-Addierer (4-Bit-MUX, 1-Bit-MUX, Carry Ripple Addierer)\
\
\
\
\
\
\
\
HANDBUCH\
AUFBAU:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs21\fsmilli10909 \cf2 1. Einf\'fchrung\
1.1. Produktumgebung\cf0 \

\fs23\fsmilli11955 \cf2 I. Moodle\

\fs21\fsmilli10909 2. F\'fcr Sch\'fcler\
3. F\'fcr Dozenten\
3.1. \'dcberpr\'fcfungderKorrektheitvonAbgaben\cf0 \

\fs23\fsmilli11955 \cf2 II.	FunCKit - Bedienungsanleitung\

\fs21\fsmilli10909 4. Benutzeroberfl\'e4che - eine \'dcbersicht \
5. Die Men\'fcbar\
6. Editier-Werkzeuge\
7. Neue-Baustein-Liste	\
8. Simulationsbedienung\
9. Editieren\cf0 \
\cf2 10. Komponenten\cf0 \
\cf2 11. Simulieren\
12. Speichern und \'d6ffnen\cf0 \
\cf2 13. Features im Detail\
14. Der Projektbaum\cf0 \
\cf2 15. Einstellungen\
16. Shortcuts
\fs24 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 \
\
DOKUMENTATION??? (WEGLASSEN!!!!!!)\
\
\
4. SCHWIERIGKEITEN:\
wie bereits letztens angedeutet:\
1. Vergleich der Aufgaben:\
->In einem Zimmer sind 3 Lichtschalter und eine Lampe. Bei jeder Bet\'e4tigung einen beliebigen Schalters muss sich der Zustand der Lampe \'e4ndern. Simuliere dieses Szenario.\
--> Kann nicht verglichen werden, deshalb dieser Zusatz:\
P.S. Ein Blinken am Anfang (unstabiler Zustand) l\'e4sst sich oftmals nicht vermeiden. Dies kann ignoriert werden. Au\'dferdem ist es f\'fcr den Server schwer, die Einreichungen mit der Musterl\'f6sung zu vergleichen, da es viele verschiedene L\'f6sungen geben kann.\
\
2. Moodle Versionen:\
bisher nicht zum Problem geworden.\
\
3. MoodleArchitektur.\
->un\'fcbersichtlich, oftmals unlogisch\
(z.B. lassen sich Dateien nicht einfach l\'f6schen)\
\
4. Teamkommunikation\
\
\
\
5. PRAKTISCHE VORSTELLUNG:\
\
1. Umgang mit funCKit!\
\
2. F\'fcr Dozenten:\
->Erstellen dieser Aufgabe:\
1.8.Finde den Fehler bei dem Schaltnetz mit diesem booleschem als Schaltnetz: (a und b) v (c und d).\
\
3. F\'fcr Sch\'fcler/Studenten:\
\
\
\
}